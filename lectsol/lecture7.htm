<!DOCTYPE html>
<html>

<head>

<title>'Lecture 7 | Missing Semester Solutions'</title>

<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<link rel="stylesheet" href="../style.css">
</head>

<body>

	<h3><a href="https://missing.csail.mit.edu/2020/debugging-profiling/" target="_blank">Lecture 7</a></h3>
	<ol class=lectlist>

	<h5>Debugging</h5>

		<li>Use <code>journalctl</code> on Linux or <code>log show</code> on macOS to get the super user accesses and commands in the last day. If there aren’t any you can execute some harmless commands such as <code>sudo ls</code> and check again.
			
			<div class=inst><div class=code-container><code class="in">sudo journalctl _COMM=sudo --since yesterday</code>
						<button class="copy">Copy</button></div></div>

		</li>

		<li>Do <a href='https://github.com/spiside/pdb-tutorial'>this</a> hands on <code>pdb</code> tutorial to familiarize yourself with the commands. For a more in depth tutorial read <a href='https://realpython.com/python-debugging-pdb' target=_blank>this</a>.
		</li>

		<li><p>Install <code><a href='https://www.shellcheck.net/' target=_blank>shellcheck</a></code> and try checking the following script. What is wrong with the code? Fix it. Install a linter plugin in your editor so you can get your warnings automatically.</p>
			<div class=instcode><pre>#!/bin/sh
## Example: a typical script with several problems
for f in $(ls *.m3u)
do
  grep -qi hq.*mp3 $f \
    && echo -e 'Playlist $f contains a HQ file in mp3 format'
done</pre></div>
				<div class=inst>After installing Shellcheck (<code>sudo apt install shellcheck</code>), run this command.
				<div class=code-container><code class="in">shellcheck script.sh</code>
									<button class="copy">Copy</button></div>
		Appply the correction to the file:
		<div class=code-container><div class=file-cont><p class=codehead>boot_time.sh</p><code class=file><pre>
#!/bin/sh

for f in ./*.m3u
do
  grep -qi "hq.*mp3" "$f" \
    && printf "Playlist %s contains a HQ file in mp3 format" "$f"
done</pre></code></div>
					<button class=copy>Copy</button></div>
				You can install Neomake as a linter plugin. <br>
				Create the plugins directory (if not already done) and download the plugin:
				<div class=code-container><code class="in">mkdir -p ~/.vim/pack/plugins/start && git clone https://github.com/neomake/neomake.git ~/.vim/pack/plugins/start/neomake</code>
									<button class="copy">Copy</button></div>

				Configure Neomake to use Shellcheck:
				<div class=code-container><div class=file-cont><p class=codehead>.vimrc</p><code class=file><pre>
" Enable Neomake with shellcheck
let g:neomake_sh_enabled_makers = ['shellcheck']
					</pre></code></div>
					<button class=copy>Copy</button></div>

		</li>

		<li>(Advanced) Read about <a href='https://undo.io/resources/reverse-debugging-whitepaper/' target=_blank>reversible</a> debugging and get a simple example working using <code><a href='https://rr-project.org/' target=_blank>rr</a></code> or <code><a href='https://morepypy.blogspot.com/2016/07/reverse-debugging-for-python.html' target=_blank>RevPDB</a></code>.
			<div class=inst>
				I used RevPDB:
				<div class=code-container><code class="in">pip install revpdb</code>
					<button class="copy">Copy</button></div>
				You can use this python script as an example:
				<div class=code-container><div class=file-cont><p class=codehead>example.py</p><code class=file><pre>
def main():
	x = 0
	for i in range(5):
		x += i
	    print(f"i: {i}, x: {x}")
	    return x
					
if __name__ == "__main__":
    main()
					</pre></code></div>
					<button class=copy>Copy</button></div>

				Then, run the script in RevPDB:
				<div class=code-container><code class="in">revpdb example.py</code>
					<button class="copy">Copy</button></div>
				
			</li>
		</li>

	<h5>Profiling</h5>

		<li><a href='../files/sorts.py'>Here</a> are some sorting algorithm implementations. Use <code><a href='https://docs.python.org/3/library/profile.html' target=_blank>cProfile</a></code> and <a href='https://github.com/pyutils/line_profiler' target=_blank><code>line_profiler</code></a> to compare the runtime of insertion sort and quicksort. What is the bottleneck of each algorithm? Use then <code>memory_profiler</code> to check the memory consumption, why is insertion sort better? Check now the inplace version of quicksort. Challenge: Use <code>perf</code> to look at the cycle counts and cache hits and misses of each algorithm.
		</li>

		<li><p>Here’s some (arguably convoluted) Python code for computing Fibonacci numbers using a function for each number.</p>
			<div class=instcode><pre>#!/usr/bin/env python
def fib0(): return 0

def fib1(): return 1

s = """def fib{}(): return fib{}() + fib{}()"""

if __name__ == '__main__':

    for n in range(2, 10):
        exec(s.format(n, n-1, n-2))
    # from functools import lru_cache
    # for n in range(10):
    #     exec("fib{} = lru_cache(1)(fib{})".format(n, n))
    print(eval("fib9()"))</pre></div>
				<p>Put the code into a file and make it executable. Install prerequisites: <code><a href='https://lewiscowles1986.github.io/py-call-graph/' target=_blank>pycallgraph</a></code> and <a href='https://graphviz.org/' target=_blank>graphviz</a></code>. (If you can run <code>dot</code>, you already have GraphViz.) Run the code as is with <code>pycallgraph graphviz -- ./fib.py</code> and check the <code>pycallgraph.png</code> file. How many times is <code>fib0</code> called?. We can do better than that by memoizing the functions. Uncomment the commented lines and regenerate the images. How many times are we calling each <code>fibN</code> function now?</p>
		</li>

		<li>A common issue is that a port you want to listen on is already taken by another process. Let’s learn how to discover that process pid. First execute <code>python -m http.server 4444</code> to start a minimal web server listening on port <code>4444</code>. On a separate terminal <code>run lsof | grep LISTEN</code> to print all listening processes and ports. Find that process pid and terminate it by running <code>kill &st;PID&gt;</code>.
		</li>

		<li>Limiting a process’s resources can be another handy tool in your toolbox. Try running <code>stress -c 3</code> and visualize the CPU consumption with <code>htop</code>. Now, execute <code>taskset --cpu-list 0,2 stress -c 3</code> and visualize it. Is stress taking three CPUs? Why not? Read <code><a href='https://www.man7.org/linux/man-pages/man1/taskset.1.html' target=_blank>man taskset</a></code>. Challenge: achieve the same using <code><a href='https://www.man7.org/linux/man-pages/man7/cgroups.7.html' target=_blank>cgroups</a></code>. Try limiting the memory consumption of <code>stress -m</code>.
		</li>

		<li>(Advanced) The command <code>curl ipinfo.io</code> performs a HTTP request and fetches information about your public IP. Open <a href='https://www.wireshark.org/' target=_blank>Wireshark</a> and try to sniff the request and reply packets that <code>curl</code> sent and received. (Hint: Use the <code>http</code> filter to just watch HTTP packets).
		</li>






		<li>One common mistake when learning Git is to commit large files that should not be managed by Git or adding sensitive information. Try adding a file to a repository, making some commits and then deleting that file from history (you may want to look at <a herf='https://docs.github.com/fr/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository' target=_blank>this</a>).
			<div class=inst><div class=code-container><code class="in">bfg --delete-files YOUR-FILE-WITH-SENSITIVE-DATA</code>
									<button class="copy">Copy</button></div>
				If you also want to clean the remote repository:
			<div class=code-container><code class="in">git push --force</code>
				<button class="copy">Copy</button></div></div>
		</li>

		<li>Clone some repository from GitHub, and modify one of its existing files. What happens when you do <code>git stash</code>? What do you see when running <code>git log --all --oneline</code>? Run <code>git stash pop</code> to undo what you did with <code>git stash</code>. In what scenario might this be useful?
			<div class=inst>
				Running git stash stores the modifications you made and reverts the working directory to the latest commit (no change). <code>git log --all --oneline</code> Won't show the stashed changes because they are stored seperately. <code>git stash pop</code> will revert the working tree back to before <code>git stash</code>.<br>
				This is useful to quickly see what changes you made since the last commit and to write the right commit message. Also it allows you to change branches without having to commit your work or to pull new changes from remote repository without conflictig with local changes.
			</div>
		</li>

		<li>Like many command line tools, Git provides a configuration file (or dotfile) called <code>~/.gitconfig</code>. Create an alias in <code>~/.gitconfig</code> so that when you run git graph, you get the output of <code>git log --all --graph --decorate --oneline</code>. You can do this by directly <a href='https://git-scm.com/docs/git-config#Documentation/git-config.txt-alias' target=_blank>editing</a> the <code>~/.gitconfig</code> file, or you can use the <code>git config</code> command to add the alias. Information about git aliases can be found <a href='https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases' target=_blank>here</a>.
			<div class=inst>
				<div class=code-container><code class="in">vim ~/.gitconfig</code>
				<button class="copy">Copy</button></div>
				<div class=code-container><div class=file-cont><p class=codehead>boot_time.sh</p><code class=file><pre>
[alias]
	graph = log --all --graph --decorate --online
						</pre></code></div>
					<button class=copy>Copy</button></div></div>
		</li>

		<li>You can define global ignore patterns in <code>~/.gitignore_global</code> after running <code>git config --global core.excludesfile ~/.gitignore_global</code>. Do this, and set up your global gitignore file to ignore OS-specific or editor-specific temporary files, like <code>.DS_Store</code>.
			<div class=inst>
				Here are some examples of files you might want to ignore:
				<div class=code-container><div class=file-cont><p class=codehead>gitignore_globa</p><code class=file><pre>
# Ignore zone identifier files (WSL)
*Zone.Identifier

# Ignore vim swap and backup files
*.swp
*.swo
*.swn

*.bak
*.backup

# Sensitive SSH and GPG files
.ssh/
id_rsa
id_rsa.pub
known_hosts

.gnupg/						</pre></code></div>
					<button class=copy>Copy</button></div></div>
		</li>

		<li>Fork the repository for the class website, find a typo or some other improvement you can make, and submit a pull request on GitHub (you may want to look at <a href='https://github.com/firstcontributions/first-contributions'>this</a>). Please only submit PRs that are useful (don’t spam us, please!). If you can’t find an improvement to make, you can skip this exercise.
			<div class=inst><p>The class website has few improvements left to make so you can do this exercise with <a href='https://github.com/simon-bouchard/simon-bouchard.github.io' target=_blank>this website's repository</a> (the site you are currently on). <br>
				This site still has a lot of improvements to make so you don't have any excuse to skip this exercise. This will also give you an opportunity to practice vim.</p>
				<p>If you don't know what to do, you can make the the html files xhtml compatible (especially quotations), add/remove whitespace (both in the files and the website) and add comments to make it more readable, rephrase some of the text so it doesn't look like I was having a stroke when writing it (English is my second language) or add explanations to the exercises I was to lazy to explain completely.</p>
				If I accept your changes, you will also be granted the enormous honor of having your name listed in the contributions section from the about page no one ever looks at!
			</div>
		</li>

	</ol>



<div class=navBtn>
	<div class=tooltip>
		<img src="../images/next.png" id=prevBtn>
		<span class=tooltipText>Previous lecture</span></div>

	<div class='tooltip right'>
		<img src="../images/next.png" id=nextBtn>
		<span class=tooltipText>Next lecture</span></div>
</div>

<script>

const lectureList = [ 
		{lect: 'lect1'},
		{lect: 'lect2'},
		{lect: 'lect3'},
		{lect: 'lect4'},
		{lect: 'lect5'},
		{lect: 'lect6'},
		{lect: 'lect7'},
		{lect: 'lect8'},
		{lect: 'lect9'},
		{lect: 'lect10'}
];

let lecture;

/*To recieve lecture num from parent page*/
window.addEventListener('message', (event) => {
	lecture = lectureList.findIndex(item => item.lect === event.data);
});

/*To send new lecture ref to the parent page*/
function loadLecture(lecture) {
	window.parent.postMessage(lectureList[lecture], '*');
}

document.getElementById('prevBtn').addEventListener('click', () => {
		lecture = (lecture - 1 + lectureList.length) % lectureList.length;
		loadLecture(lecture);
});

document.getElementById('nextBtn').addEventListener('click', () => {
		lecture = (lecture + 1) % lectureList.length;
		loadLecture(lecture);
});

</script>
		
<script>

/*Add copy button */
document.querySelectorAll('.code-container button.copy').forEach(button => {
  button.addEventListener("click", function() {
    const code = this.previousElementSibling.textContent;

    navigator.clipboard.writeText(code).then(() => {
      this.textContent = "Copied";
      this.classList.add("copied");
      
      setTimeout(() => {
        this.textContent = "Copy";
        this.classList.remove("copied");
      }, 2000);
    }).catch(err => {
      console.error("failed to copy text: ", err);
    });
  });
});


/*Make copy button apear on hover*/
const codeBlocks = document.querySelectorAll('div.code-container');

codeBlocks.forEach(function(code) {
  code.addEventListener('mouseover', function() {
    code.lastElementChild.classList.add('display');
  });

  code.addEventListener('mouseout', function() {
    code.lastElementChild.classList.remove('display');
  });
});

</script>

</body>
</html>
